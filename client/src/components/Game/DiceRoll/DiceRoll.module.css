/* Define a root variable for dice size */
:root {
  --dice-size: 50px; /* Change this value to resize everything */
}

/* Dice container uses a 3x3 grid to match die layouts */
.diceContainer {
  /* display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr); */
  display:flex;
  gap: calc(var(--dice-size) * 0.2); /* Scales proportionally */
  justify-content: center;
  align-items: center;
  width: fit-content;
  margin: auto;
}

/* Dice appearance */
.dice {
  width: var(--dice-size);
  height: var(--dice-size);
  background: white;
  border: calc(var(--dice-size) * 0.06) solid black; /* Border scales with dice */
  border-radius: calc(var(--dice-size) * 0.14); /* Slightly rounded */
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
  transition: transform 0.2s ease-in-out;
}

/* Empty slots ensure correct positioning of dice */
.emptySlot {
  width: var(--dice-size);
  height: var(--dice-size);
  visibility: hidden;
}

/* Dice dot layout */
.diceFace {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  width: 100%;
  height: 100%;
  padding: calc(var(--dice-size) * 0.15);
}

/* Dice dots */
.dot {
  width: calc(var(--dice-size) * 0.15);
  height: calc(var(--dice-size) * 0.15);
  border-radius: 50%;
  margin: auto;
  background-color: transparent;
  transition: background-color 0.1s ease-in-out;
}

.activeDot {
  background-color: black;
}
 /* @keyframes breathingEffect {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); } 
    100% { transform: scale(1); }
}


/* Apply breathing effect only to inner elements (dots & face) */
/*
.dice .diceFace {
    animation: breathingEffect 1.5s infinite ease-in-out;
}  */